d='limitations'></a>Upgrade ##

###**Transaction Analytics**

This document will walk you through to configure analytics agent and see transaction analytics on the AppDynamics controller.

**Feature Snapshot**

 - If your AppDynamics controller has license for Analytics monitoring, you can monitor application analytics
 - Supported Analytics Agent version: **4.1.8.0**
 - Applications supported on Analytics Agent: **Java, .NET**
 - The analytics agent is compatible with controller version 4.1.8.0 and above

**How Transaction Analytics Work ?**
The application agent forwards analytics data to the analytics agent. The analytics agent then sends this data to the event-service. The controller then queries the event service to fetch the analytics data and renders on controller dashboard.

![Analytics Agent Working](https://github.com/Appdynamics/docs-appdynamics/blob/master/images/pdf1.png)

The individual components are:   

 - **AppDynamics App Agent**: Application Analytics relies upon the same app agents that AppDynamics APM uses. If you already use AppDynamics APM, you likely already have these deployed to your monitored applications
 - **Analytics Agent**: The Analytics Agent collects data from one or more app agents and sends it to the Events Service.
 - **Analytics Plugin** (AP) to the App Agent: The Analytics Plugin extends App Agent functionality so that it can collect and forward data to the Analytics Agent.
 - **Event Service**: The event service is a unstructured document store which acts as a place holder for analytics data. If you already do not have an event service running, please contact AppDynamics support to get one.
 - **Controller**: The controller queries the event service and renders analytics data to the controller dashboard.
 
**Deploying Analytics Agents to Multiple Nodes**
 - A real world scenario is unlikely to consist of a single monitored node, as shown in the diagram above. It usually consists of many applications deployed over many hosts.
 - There must be at least one Analytics Agent in the monitored environment, although multiple agent plugins collecting only transaction data can share a single Analytics Agent, as shown in the figure.
![Realworld Scenario](https://github.com/Appdynamics/docs-appdynamics/blob/master/images/pdf2.png)
 - In this example, AppServerHost1-3 are collecting only transaction data, so only app agents are required.  Each one connects to the Analytics Agent on AppServerHost4, the analytics agent forwards the transaction analytics data to the event service. Finally the controller, fetches the analytics data from the event service and renders to the controller analytics dashboard.
 
The below mentioned steps will guide you to configure Transaction Analytics for your applications deployed on PCF

**Step1: Configure tile for Analytics**

![Analytics Config For Tile GUI](../images/Analytics1.png)

- The AppDynamics Controller license page will specify the global account name and access key required to configure the Analytics agent. ![License Page](https://github.com/Appdynamics/docs-appdynamics/blob/master/images/Analytics2.png)
- If you already have an AppDynamics Analytics Event Service URL, please specify the complete URL in the Analytics Event Service URL textbox. If you do not have one, please contact AppDynamics support to get one. Example: The Analytics Event Service URL should look something like this, http://analytics-event-service.com:80

Once all the three required fields are configured correctly, click on the SAVE button to save this configuration.

Once the updates on the tile are installed successfully, the Analytics agent will be deployed in **AppDynamicsPCFOpsMetrics-service-org** org  as an independant cf application by the name **AppDynamicsAnalytics** and with a route **`appdynamics-analytics.<domain-name>`**

AppName = AppDynamicsAnalytics

For Example:

    $cf target -o AppDynamicsPCFOpsMetrics-service-org
    $cf apps
    Getting apps in org AppDynamicsPCFOpsMetrics-service-org / space AppDynamicsPCFOpsMetrics-service-space as admin...
    OK
    name                       requested state   instances   memory   disk   urls
    																												       				           AppDynamicsAnalytics       stopped           0/1         1G       1G     appdynamics-analytics.10.0.34.178.xip.io
																																	   					                                      																																									      									      
**Step2: Bind application to analytics agent**

The analytics agent is compatible with the following applications: 

 - Java
 - .NET

Once the tile is deployed, we need to bind the application with the analytics agent so that the analytics agent could collect the analytics data from the target application.

To do this, we need to set a JAVA system property on the application to forward data to analytics agent. Go to the org where the target application is running. 

    $cf set-env <target-app-name> JAVA_OPTS "-Dappdynamics.analytics.agent.url=http://appdynamics-analytics.<domain-name>/v1/sinks/bt" 

where, `http://appdynamics-analytics.<domain-name>` is the URL of the analytics agent running in **AppDynamicsPCFOpsMetrics-service-org** org 

Restage the application for the changes to take affect.

    $ cf restage <target-app-name> 

**Step3: Configure Controller to fetch data from event service** 
Your controller should be configured, to fetch analytics data from the event-service.

 - For customers who are using SaaS controllers, your controller should already be configured to fetch data from SaaS event-service.
 - For customers who are using On-Premise controller, you need to login as an admin in your controller, and configure the event-service url and the controller key for authentication as highlighted in the below image.
![AdminPage](https://github.com/Appdynamics/docs-appdynamics/blob/master/images/ControllerAdminForAnalytics.png)

For any help with this configuration, please contact AppDynamics support.

**Step4: Configure Analytics Collector on the Controller** 

 - On your AppDynamics controller, configure the analytics collector for
   the target application.

![ConfigureAnalyticsCollector](../images/Analytics3.png) 

- From the drop-down select the same target application for which you have set the JAVA system property in the previous step. 
- Check Enable Analytics Data checkbox - Add transactions you wish to report analytics data ![enter image description here](../images/Analytics4.png) 
- The **HTTP Data Collectors** and **Trasactions for GUID Injection** field are optional. If you wish to configure them, refer the following documentation     
  - [Configure HTTP Data Collectors](https://docs.appdynamics.com/display/PRO42/Configuring+Transaction+Analytics) This enables collection of additional business data using HTTP Data Collectors 
  - [Configure Transactions for GUID Injection](https://docs.appdynamics.com/display/PRO42/Business+Transaction+and+Log+Correlation) By configuring business transactions for GUID Injection, you can correlate logs to specific business transaction requests. This can be helpful when you see slow transactions and the call graph does not give you enough information to get to the root cause. You can use this feature to get the full context related to a failed or slow transaction.
 ![Optional Fields](../images/Analytics5.png) 

**Step5: Analyze business transactions using analytics** 
Once this collector is configured, generate some traffic on your application and check the analytics data by clicking on the **Analytics** on your controller.
 ![Analytics Tab](../images/Analytics7.png) 
 ![Analytics Data](../images/Analytics8.png)
